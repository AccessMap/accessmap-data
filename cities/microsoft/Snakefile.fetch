import shutil
import tempfile
import zipfile

import rasterio as rio
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider


HTTP = HTTPRemoteProvider()


rule all:
    input:
        ["data_sources/extract.pbf",
         "data_sources/dem.tif"]


rule fetch_osm:
    input:
        HTTP.remote("http://download.geofabrik.de/north-america/us/washington-latest.osm.pbf", keep_local=True)
    output:
        "data_sources/extract.pbf"
    run:
        shell("mv {input} {output}")


rule fetch_dem:
    input:
        HTTP.remote("https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/13/ArcGrid/USGS_NED_13_n47w122_ArcGrid.zip", keep_local=True)
    output:
        temp("data_sources/dem.zip")
    run:
        shell("mv {input} {output}")


rule process_dem:
    input:
        "data_sources/dem.zip"
    output:
        "data_sources/dem.tif"
    run:
        zipper = zipfile.ZipFile(input[0])
        extract_dir = "grdn47w122_13/"

        # Extract everything
        tempdir = tempfile.mkdtemp()
        for path in zipper.namelist():
            if extract_dir in path:
                if extract_dir == path:
                    continue
                extract_path = os.path.join(tempdir, os.path.basename(path))
                with zipper.open(path) as f:
                    with open(extract_path, "wb") as g:
                        g.write(f.read())

        dem_path = os.path.join(tempdir, "w001001.adf")

        with rio.open(dem_path) as src:
            profile = src.profile

            profile.update({"blockysize": 16, "driver": "GTiff", "compress": "lzw"})

            with rio.open(output[0], "w", **profile) as dst:
                data = src.read()
                dst.write(data)

        shutil.rmtree(tempdir)
